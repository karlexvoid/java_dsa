subsets : 

    purmutations and combinations 
    non adjacent collections 
    3,5,9 => 3   5   9   3,5    3,9    3,5,9    5,9 
    this patter of taking some elements and removing some elements is known as subset pattern

    public class MyClass {
        public static void main(String args[]) {
            String str = "abc";
            subseq("","abc");
        }
        
        static void subseq(String p ,String up){
            if(up.isEmpty()){
                System.out.println(p);
                return;
            }  
            char ch = up.charAt(0);
            subseq(p+ch,up.substring(1));
            subseq(p,up.substring(1));
        }

        //returning subsets inside a array list 
        static ArrayList<String> subseqArray(String p , String up){
            if(up.isEmpty()){
                ArrayList<String> result = new ArrayList<>();
                result.add(p);
                return result;
            }
            char ch = up.charAt(0);
            ArrayList<String> left =  subseqArray(p+ch,up.substring(1));
            ArrayList<String> right =  subseqArray(p,up.substring(1));
            
            left.addAll(right);
            return left;
        }
    }


purmutations : 

    abc = permutations [abc , bca , cba , cab , bac ..]

    static void findPermuations(String p,String up){
	    if(up.isEmpty()){
	        System.out.println(p);
	        return;
	    }
	    
	    char ch = up.charAt(0);
	    
	    for(int i = 0 ;i <= p.length();i++){
	        
	        String f = p.substring(0,i);
	        String s = p.substring(i,p.length());
	        findPermuations(f+ch+s,up.substring(1));
	    }
	}

    returning list 
    static ArrayList<String> findPermuations(String p,String up){
	    if(up.isEmpty()){
	        ArrayList<String> result =  new ArrayList<>();
	        result.add(p);
	        return result;
	    }
	    
	    char ch = up.charAt(0);
	    ArrayList<String> ans =  new ArrayList<>();
	    for(int i = 0 ;i <= p.length();i++){
	        String f = p.substring(0,i);
	        String s = p.substring(i,p.length());
	        ans.addAll(findPermuations(f+ch+s,up.substring(1)));
	    }
	    
	    return ans;
	}



#important 
letter combination of a string : https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/

    approach : 
    
        process - unprocess recurssion

        letter mapping 

            3*n-2  till (3*n-2 + 3) ,,, exception for 7(till 4) 8(start + 1 , till 3) 9(starts + 1,till 4) 

        static ArrayList<String> phonePad(String p , String up){
            if(up.isEmpty()){
                ArrayList<String> result =  new ArrayList<>();
                result.add(p);
                return result;
            }
    
            char ch = up.charAt(0);
            int digit = ch - '0';
            int start = 3*(digit-2);
            int end = start + 3;;
    
            if(digit == 7){
                end = start + 4;
            }
            if(digit == 8){
                start = start + 1;
                end = start + 3;
            }
            if(digit == 9){
                start = start + 1;
                end = start + 4;
            }
            ArrayList<String> ans =  new ArrayList<>();
            for(int i = start ; i < end ; i++){
                ans.addAll(phonePad(p + (char)('a'+i) , up.substring(1)));
            }
            return ans;
        }




