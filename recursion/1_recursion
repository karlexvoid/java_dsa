All the function call in the java goes into the stack memeory 
while the function is not finished executing it will remain in stack 
when a function is finished executing it is removed from the stack ,
     and the flow of the program is restored to where that function was called 

Recursion means a function that calls itself 
    Base condition : condition where our Recursion will stop making new calls 
    since the function is being called again and again , you can treat it as a separate call in the stack 

Why recursion ? 
    it helps us solve bigger complex problems in simple way 
    you can convert recursion sol into iteration(loops and for loops) and vice versa 
    space complexity : not constant 

Visualizing recursion : recursive_tree.png 

to see if you can solve a problem using recursion , check if there is a smaller version on a problem that you can solve 
break it down into a smaller problem 
reccurence solution 
the base condtion is respresented by answers that we already have 



Steps to solve rec problem : 

    step 1 => identify if you can break the problem into smaller problem 
    step 2 => write the reccurence relation if needed 
    step 3 => draw the recurssive tree 
                see the flow of function how they are getting in the stack 
                identify and focus on left tree calls and right tree calls 
                using pen and paper draw the tree and pointer again and again 
                use a debug to see the flow 
    step 4 => see the values that are retured at each step , see where the fuction call will come out of  


two key points : 
    how stack is working 
    what variable are being passed , returned and used in body 
        arguments 
        return type 
        body 

types of reccurence relation : 
    linear reccurence relation -> fibonacci -- not a good approach , because repeated function calls , so we use dynamic programming here 
    divide and conquer -> binary search 
            (search space is reduced by a factor)



some tips : 
--n means first n will be subtracted then passed and n-- means first n will be passed and then substracted 