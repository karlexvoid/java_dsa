Peak index in mountain array 
https://leetcode.com/problems/peak-index-in-a-mountain-array/

	approach 1. 

		class Solution {
		    public int peakIndexInMountainArray(int[] arr) {
		       int start = 0;
		       int end = arr.length-1;
		       while(start<end){
		            int middle = start + (end-start)/2;
		            if(arr[middle] > arr[middle+1]){
		                //you are in dec part of array
		                //this maybe ans, but look at left 
		                //this is why end != middle - 1
		                end = middle;
		            }
		            else {
		                //you are in ascending part of an array 
		                start = middle+1; // because we know that middle+1 element is greater that middle
		            }
		       }
		        // in the end, start == end and pointing to the largest number because of the 2 checks above
		        // start and end are always trying to find max element in the above 2 checks
		        // hence, when they are pointing to just one element, that is the max one because that is what the checks say
		        // more elaboration: at every point of time for start and end, they have the best possible answer till that time
		        // and if we are saying that only one item is remaining, hence cuz of above line that is the best possible ans
		        return start;
		    }
		}

	approach 2. 

		class Solution {
		    public int peakIndexInMountainArray(int[] arr) {
		       int start = 1;
		       int end = arr.length-2;
		       //updated for the edge cases.

		       while(start<=end){
		            int middle = start + (end-start)/2;
		            if(arr[middle] > arr[middle+1] && arr[middle] > arr[middle-1]){
		                return middle;
		            }
		            else if(arr[middle] < arr[middle+1]){
		                start = middle+1;
		            }
		            else if(arr[middle] < arr[middle-1] ){
		                end = middle-1;
		            }
		       }
		        return -1;
		    }
		}