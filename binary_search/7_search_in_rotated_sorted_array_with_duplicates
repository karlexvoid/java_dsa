search in rotated sorted array with duplicate values 
https://leetcode.com/problems/search-in-rotated-sorted-array-ii/


class Solution {
    public int binarySearch(int start ,int end ,int target,int[] nums,boolean rev){
        while(start <= end){
            int middle = start + (end-start)/2;
            if(rev){
                if(nums[middle] > target){
                    start = middle+1;
                }
                else if(nums[middle] < target){
                    end = middle -1;
                }
                else{
                    return middle;
                }
            }
            else{
                if(nums[middle] < target){
                    start = middle+1;
                }
                else if(nums[middle] > target){
                    end = middle -1;
                }
                else{
                    return middle;
                }
            }
        }
        return -1;
    }
    public int findPivot(int start, int end ,int[] nums){
        while(start < end){
            int middle = start + (end-start)/2;

            //case 1 when middle > middle +1 
            if(end > middle && nums[middle] > nums[middle+1]){
                return middle;
            }

            //case 2 when middle -1 > middle 
            if(start < middle && nums[middle-1] > nums[middle]){
                return middle-1;
            }

            //case where all three values are same                
            if(nums[start] == nums[middle] && nums[start] == nums[end]){
                //first we have to check if start or end are pivot or not 
                if(nums[start]>nums[start+1]){
                    return start;
                }
                if(nums[end-1] > nums[end]){
                    return end-1;
                }
                start++;
                end--;  
            } 
            else if(nums[start] < nums[middle] || (nums[start] == nums[middle] && nums[middle]>nums[end])){
                //left side is sorted so pivot should be in the right
                start = middle +1;
            }
            else{
                end = middle-1;
            }
        } 
        return -1;
    }
    public boolean search(int[] nums, int target) {
        //find pivot  array 
        int start = 0;
        int end = nums.length-1;
        int pivot = findPivot(start,end,nums);
        int ans = -1;

        //binary search in left side
        ans = binarySearch(0,pivot,target,nums,false);
        if(ans == -1){
            //binary search in right side 
            ans = binarySearch(pivot+1,nums.length-1,target,nums,false);
        }
        if(ans == -1){
            return false;
        }
        else{
            return true;
        }
    }
}



alternate : the case where all three are same here , we can also use recursion first in left half then right half