JavaScript Basics

                    1. What are the different data types in JavaScript?
                        Number, String, Boolean, Undefined, Null, BigInt, Symbol, Object (includes arrays, functions).

    2. What is the difference between var, let, and const?

        Function Scoped (var) - If you declare a variable using var, it is available inside the whole function — even if declared inside an if or for block.
        Block Scoped (let and const) - If you use let or const, the variable is only available inside that block 

        - var: function-scoped, can be re-declared & updated.
        - let: block-scoped, can be updated.
        - const: block-scoped, cannot be updated or re-declared.

    3. What is hoisting in JavaScript?
        Hoisting means JavaScript moves declarations to the top of the scope before the code runs.
        JavaScript moves declarations to the top of the scope before execution. var is hoisted and initialized with undefined, 
        while let and const are hoisted but not initialized.

                    4. What is the difference between == and ===?
                        == : only compares values 
                        === : compares value as well as data type 

                    5. What is the typeof operator, and how does it work?
                        Used to check the type of a variable. Example: typeof 123 → 'number'.

    6. What is the difference between null and undefined?
        null: assigned by developer to indicate "no value".
        undefined: variable declared but not initialized.

    7. What is the difference between pass by value and pass by reference in
    JavaScript?
       Stored by value — if you copy, you get a new version.eg int ,string
       Stored by reference — they point to the same memory.Used with objects and arrays. eg , object ,arrays 

    8. What is NaN, and how do you check if a value is NaN?
        NaN means "Not a Number". You can check it using isNaN(value) or Number.isNaN(value).

    9. What is the difference between primitive and reference types in JavaScript?
        Stored by value — if you copy, you get a new version.eg int ,string
        Stored by reference — they point to the same memory.Used with objects and arrays. eg , object ,arrays 

    10.What happens when you use console.log() before declaring a variable?
        - var x; console.log(x); → undefined
        - let/const x; console.log(x); → ❌ Error (Temporal Dead Zone).


funtions and scopes 

    11.What are function expressions vs. function declarations?
        function declaration is hoisted , you can call it before its defined
        function expression is not hoisted , you cannot call it before it is defined 

    12.What is a higher-order function? Provide an example.
        A function that takes another function as a parameter or returns a function.

    13.What is closure in JavaScript?
        A function inside a function that remembers the outer function’s variables even after the outer function has finished.

    14.What is the lexical scope?
        A function can access variables defined in its outer (parent) scope.
        Inner functions can see up, but outer functions can't see in.

    15.What is an Immediately Invoked Function Expression (IIFE)?
        A function that runs immediately after it's created.

    16.How does JavaScript handle asynchronous execution inside a loop?
        by using block scoped variables

    17.What is the difference between call(), apply(), and bind()?
        greet.call(person) → calls greet() immediately with this as person
        greet.apply(person) → same as call, but takes arguments as an array
        greet.bind(person) → returns a new function with this set to person, but doesn’t call it immediately

    18.What happens when you return a function inside another function?
        it creates a closure 

    19.What is function currying?
        Transforming a function that takes many arguments into a series of functions that take one.

    20.What is a pure function?
        Always gives same output for same input.
        Does not change anything outside (no side effects).



Objects & Prototypes

    21.What is prototypal inheritance in JavaScript?
        It means objects can inherit properties and methods from other objects.

    22.How do you create an object without a prototype?
        Use Object.create(null):

    23.What is the difference between Object.create() and Object.assign()?
        Object.create(proto) creates a new object with a given prototype.
        Object.assign(target, source) copies properties from one object to another.

    24.What is the difference between shallow copy and deep copy?
        Copies only top-level. Nested object is still shared — not a real full copy.
        Copies everything, including nested objects.This is a true independent copy.

                25.What are getters and setters in JavaScript objects?
                    They are functions that get and set values like properties.
         
    26.What is the __proto__ property in JavaScript?
        It points to the prototype of an object — the object it inherits from.

    27.How do you check if an object is empty in JavaScript?
        Object.keys(obj).length === 0;

    28.How do you freeze an object in JavaScript?
        Use Object.freeze() to make an object read-only — no changes allowed.

    29.What is the difference between Object.freeze() and Object.seal()?
        in freeze you cannot modify value , while in seal you can modify the value 

    30.What is the difference between for...in and for...of loops?
        for...in loops over keys (property names) of an object.
        for...of loops over values of an iterable (like arrays, strings).


Arrays & Iteration

    31.What is the difference between map(), forEach(), filter(), and reduce()?
        const arr = [1, 2, 3, 4];
        arr.map(x => x * 2);      // [2, 4, 6, 8]
        arr.forEach(x => console.log(x));  // Logs 1, 2, 3, 4
        arr.filter(x => x % 2 === 0);      // [2, 4]
        arr.reduce((acc, x) => acc + x, 0); // 10

    32.How do you remove duplicates from an array?
        new Set(arr) , set only takes unique items 

    33.What is the best way to loop over an array in JavaScript?
        for (let item of arr) {
            console.log(item);
        }

    34.How does the .reduce() function work?
        It accumulates values from the array into one result.

    35.How do you shuffle an array randomly?
        arr.sort(() => Math.random() - 0.5);

    36.What is the difference between slice() and splice()?
        arr.slice(1, 3);    // Returns items from index 1 to 2
        arr.splice(1, 2);   // Removes 2 items starting from index 1

    37.What does the .sort() function do in JavaScript?
        Sorts array as strings by default (lexical sort).

    38.How does JavaScript handle sorting numbers in an array?
        You need to give a compare function: [10, 5, 2].sort((a, b) => a - b); // [2, 5, 10]

    39.What is the difference between find() and findIndex()?
        find() returns first matching item
        findIndex() returns index of the first match

    40.What is the best way to flatten an array in JavaScript?
        Use flat(Infinity) to fully flatten deep arrays.
            const arr = [1, [2, [3, 4]]];
            const flat = arr.flat(2);  // [1, 2, 3, 4]


Asynchronous JavaScript

    41.What is the event loop in JavaScript?
        The event loop lets JavaScript handle async tasks (like setTimeout, API calls) while still being single-threaded. It waits for the call stack to be empty and then pushes queued tasks (like callbacks) into it.

    42.What are Promises in JavaScript?
        A Promise is a way to handle async operations. It can be:
            Pending – still running
            Resolved – completed successfully
            Rejected – failed

    43.What is the difference between async and defer attributes in script tags?
        You want scripts to wait for HTML to load, and run in order.
        loads script in parallel and runs it as soon as it’s ready (may block rendering).

    44.What is async/await, and how does it work?
        It's a cleaner way to write async code.
        Instead of chaining .then(), you use await inside a function marked async.

    45.What is the difference between Promise.all(), Promise.allSettled(),
    Promise.race(), and Promise.any()?
        Promise.all([p1, p2])         // Wait for both, error if one fails
        Promise.allSettled([p1, p2])  // Give results for both, even if one fails
        Promise.race([p1, p2])        // Return whichever finishes first
        Promise.any([p1, p2])         // Return first successful one

    46.How do you handle errors in Promises?
        Use .catch() or try...catch with async/await.

    47.What is a microtask queue in JavaScript?
        These tasks are executed after the current call stack is empty, but before any setTimeout or setInterval.

        console.log("1");
        Promise.resolve().then(() => console.log("2")); // Microtask
        setTimeout(() => console.log("3"), 0); // Macrotask (normal task)
        console.log("4");

        1
        4
        2   ← Microtask runs first!
        3   ← Then setTimeout (macrotask)

    48.How does setTimeout() work inside an async function?
        Even though setTimeout() is inside an async function, it still runs asynchronously after the delay, in the normal task queue.

    49.What is the difference between synchronous and asynchronous code?
        Synchronous: Code runs one line at a time, blocking the next until current is done.
        Asynchronous: Code can pause & continue later, without blocking the rest.

    50.What are Web Workers in JavaScript?
        They run JavaScript in a background thread. Useful for heavy tasks so they don’t freeze your UI.



Advanced JavaScript

DOM & Browser APIs

Performance & Optimization
